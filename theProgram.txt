# r0 = working register (variable), the thing we need for every iteration(states for LFSR)
# r1 = tap pattern (fixed for a given message)
#   	  legitimate (hex) values are: e1, d4, c6, b8,
#                                     b4, b2, fa, f3
# r2 = parity computation (variable)
# r3 = seed (fixed by first line of program)
# r4 = used as tempory register
# r13 = used to branch back from lfsr
# end of lfsr registers

# r5 = state counter  initially 0
# r6 = indicate the index of memory space to write to, start from 64
# r7 = p, the number of spaces need to append before the message, fixed
# r8 = p + 40, fixed
# r11 = read counter on message, point to the character currently reading


#start: jump to start to skip the lfsr branch
save start
store $dst
jmp

lfsr:
#and r2, r1, r0
put $r1
and $r0
store $r2

#lsl r0, r0, #1
save #1
store $r4
put $r0
sfl $r4
store $r0

#eor r2, r2, lsr #4
save #4
store $r4
put $r2
sfr $r4
xor $r2
store $r2

save #2
store $r4
put $r2
sfr $r4
xor $r2
store $r2

save #1
store $r4
put $r2
sfr $r4
xor $r2
store $r2

#and r2, r2, #1
save #1
store $r4
put $r2
and $r4
store $r2

#add r0, r0, r2
put $r0
add $r2
store $r0

#and r0, r0, #255
save #255
and $r0
store $r0
# end of lfsr

#jump back
put $r13
store $dst
jmp

start:
save #41
store $r7
lb $r7
store $r7

save #42
store $r1
lb $r1
store $r1

save #43
store $r0
lb $r0
store $r3
store $r0

save #0
store $r5
store $r11

save #64
store $r6

save #41
add $r7
store $r8
# end of initiallization

loop1:

save #1
add $r5
store $r5

# if r5 is greater than r8, it means we are encoding spaces after message
save encode_space
store $dst
put $r8
gtr $r5
btr

# if r5 is greater than r7, it means we are encoding characters inside the message
save encode_char
store $dst
put $r7
gtr $r5
btr

# else, it means we are encoding spaces before message
encode_space:
save #32
xor $r0
sb $r6
save begin_lfsr
store $dst
jmp

encode_char:
lb $r11
xor $r0
sb $r6
#increment $r11, the pointer to the message, by 1
save #1
add $r11
store $r11

begin_lfsr:
save lfsr1
store $r13
#branch to lfsr, when comes back go to lfsr1, then jump to lfsr
save lfsr
store $dst
jmp

lfsr1:

save #1
add $r6
store $r6

#done if r6 reach 127
save done
store $dst
save #127
gtr $r6
btr
save loop1
store $dst
jmp
done:

#express the done signal
@@@

# r0 = working register (variable)

# r1 = tap pattern (fixed for a given message)
#   	  legitimate (hex) values are: e1, d4, c6, b8,
#                                     b4, b2, fa, f3
# r2 = parity computation (variable), used in lfsr only
# r3 = seed (fixed by first line of program)
# r4 = pattern counter, indicating which pattern we are testing, start from 128(where the first pattern is stored)
# r5 = state counter, = 0 in the begining
# r6 = a counter to keep track of index of memory location, initially 64
# r7 = exit code, if 1 means all good

# get seed
save #64
store $r8
lb $r8
#r8 = MEM[64]
store $r8
save #32
xor $r8
store $r3


save #127
store $r4

reload:
# reset/increment value (r0 = r3, r1, r4,r5,r6,r7)

# Refresh r0
put $r3
store $r0

# Move r1 to next
lb $r4
store $r1

#increment r4 and Refresh r7
save #1
store $r7
add $r4
store $r4


# Refresh r5
save #0
store $r5

#reset r6
save #64
store $r6


#perform check space, which taks a space and xor it with tap pattern, and see if it is the character at MEM[r6]
check_space:
save lfsr2
store $r13

save lfsr
store $dst
lb $r6
store $r8
save #32
xor $r0
cmp $r8
btr

save #0
store $r7
save done2
store $dst
jmp

lfsr2:

save #1
add $r5
store $r5

save #1
add $r6
store $r6

save done2
store $dst
save #8
cmp $r5
btr

done2:
save done_find_tap_and_seed
store $dst
save #1
cmp $r7
btr

# else, jump to reload and prepare for next iteration
save reload
store $dst
jmp

done_find_tap_and_seed:

# r0 = working register (variable), the thing we need for every iteration(states for LFSR)
# r1 = tap pattern (fixed for a given message)
#   	  legitimate (hex) values are: e1, d4, c6, b8,
#                                     b4, b2, fa, f3
# r2 = parity computation (variable)
# r3 = seed (fixed by first line of program)
# r5 = state counter -- should hit 2**N-1 for N taps, used to indicate the location to read, initially 0
# r6 = indicate the index of memory space to write to, start from 0
# r7 = state counter for where to read, start from 64
# r8 = indicate whether begin to write to, initially 0

put $r4
store $r1
put $r3
store $r0
save #0
store $r5
store $r6
store $r8
save #64
store $r7
# end of initiallization


decipher:
# start of reading and writting
# see if r8 is set(begin to write to memory), if so perform decode a char
save #1
cmp $r8
save decoding
store $dst
btr

#else decipher a char and see if it is space, if so jump to lfsr, else perform decode a char
lb $r7
xor $r0
store $r11

# see if it is space
save lfsr2
store $r13
save lfsr
store $dst
save #32
cmp $r11
btr

save #1
store $r8
save decoding
store $dst
jmp

decoding:
#decipher a char and put it at MEM[r6], then increment r6
lb $r7
xor $r0
sb $r6

save #1
add $r6
store $r6
save lfsr2
store $r13
save lfsr
store $dst
jmp

lfsr3:

#increment r7 by 1, if r7 reach 127, break and exit
save #1
add $r7
store $r7

save #127
cmp $r7
save done3
store $dst
btr
save decipher
store $dst
jmp
done3:

# Express done signal
@@@
