# r0 = working register (variable), the thing we need for every iteration(states for LFSR)
# r1 = tap pattern (fixed for a given message)
#   	  legitimate (hex) values are: e1, d4, c6, b8,
#                                     b4, b2, fa, f3
# r2 = parity computation (variable)
# r3 = seed (fixed by first line of program)
# r4 = used as tempory register
# r5 = state counter  initially 0
# r6 = indicate the index of memory space to write to, start from 64
# r7 = p, the number of spaces need to append before the message
# r8 = p + 40
# r11 = read counter
save #41
store $r7
lb $r7
store $r7

save #42
store $r1
lb $r1
store $r1

save #43
store $r0
lb $r0
store $r3
store $r0

save #0
store $r5
store $r11

save #64
store $r6

save #40
add $r7
store $r8
# end of initiallization

loop1:


encode_space:
save #32
xor $r0
sb $r6



lfsr:
#and r2, r1, r0
put $r1
and $r0
store $r2

#lsl r0, r0, #1
save #1
store $r4
put $r0
sfl $r4
store $r0

#eor r2, r2, lsr #4
save #4
store $r4
put $r2
xor $r2
sfr $r4
store $r2

save #2
store $r4
put $r2
xor $r2
sfr $r4
store $r2

save #1
store $r4
put $r2
xor $r2
sfr $r4
store $r2

#and r2, r2, #1
save #1
store $r4
put $r2
and $r4
store $r2

#add r0, r0, r2
put $r0
add $r2
store $r0

#and r0, r0, #255
save #255
and $r0
store $r0
# end of lfsr

save #1
add $r5
store $r5

save #1
add $r6
store $r6

#done if r6 reach 127
save done
store $dst
save #127
gtr $r6
btr
save loop1
store $dst
jmp
done:
